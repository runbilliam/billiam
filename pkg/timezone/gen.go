// Copyright (c) 2020 Bojan Zivanovic and contributors
// SPDX-License-Identifier: Apache-2.0

// +build ignore

package main

import (
	"fmt"
	"io/ioutil"
	"log"
	"net/http"
	"os"
	"reflect"
	"sort"
	"strings"
	"text/template"
	"time"
)

const dataTemplate = `// Code generated by go generate; DO NOT EDIT.
//go:generate go run gen.go

package timezone

// Version is the zoneinfo version from which the data is derived.
const Version = "{{ .Version }}"

var names = []string{
	{{ export .Names 1 "\t" }}
}
`

func main() {
	log.Println("Fetching data...")
	b, err := fetchURL("https://ftp.iana.org/tz/code/version")
	if err != nil {
		log.Fatal(err)
	}
	version := strings.TrimSpace(string(b))
	b, err = fetchURL("https://ftp.iana.org/tz/code/zone1970.tab")
	if err != nil {
		log.Fatal(err)
	}
	data := strings.TrimSpace(string(b))

	log.Println("Processing...")
	timezones := map[string]bool{}
	for _, line := range strings.Split(data, "\n") {
		if strings.HasPrefix(line, "#") {
			continue
		}
		// Codes, Coordinates, TZ, Comments.
		s := strings.Split(line, "\t")
		timezones[s[2]] = true
	}
	names := make([]string, 0, 350)
	for name := range timezones {
		names = append(names, name)
	}
	sort.Strings(names)

	os.Remove("data.go")
	f, err := os.Create("data.go")
	if err != nil {
		log.Fatal(err)
	}
	defer f.Close()

	funcMap := template.FuncMap{
		"export": export,
	}
	t, err := template.New("data").Funcs(funcMap).Parse(dataTemplate)
	if err != nil {
		log.Fatal(err)
	}
	t.Execute(f, struct {
		Version string
		Names   []string
	}{
		Version: version,
		Names:   names,
	})

	log.Println("Done.")
}

func fetchURL(url string) ([]byte, error) {
	client := http.Client{Timeout: 15 * time.Second}
	resp, err := client.Get(url)
	if err != nil {
		return nil, fmt.Errorf("fetchURL: %w", err)
	}
	defer resp.Body.Close()
	if resp.StatusCode != http.StatusOK {
		return nil, fmt.Errorf("fetchURL: Get %q: %v", url, resp.Status)
	}
	data, err := ioutil.ReadAll(resp.Body)
	if err != nil {
		return nil, fmt.Errorf("fetchURL: Get %q: %w", url, err)
	}

	return data, nil
}

func export(i interface{}, width int, indent string) string {
	v := reflect.ValueOf(i)
	switch v.Kind() {
	case reflect.Slice:
		return exportSlice(v, width, indent)
	default:
		return fmt.Sprintf("%#v", i)
	}
}

func exportSlice(v reflect.Value, width int, indent string) string {
	b := strings.Builder{}
	for i := 0; i < v.Len(); i++ {
		fmt.Fprintf(&b, `%#v,`, v.Index(i).Interface())
		if i+1 != v.Len() {
			if (i+1)%width == 0 {
				b.WriteString("\n")
				b.WriteString(indent)
			} else {
				b.WriteString(" ")
			}
		}
	}

	return b.String()
}
